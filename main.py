from PathFinder.a_star import a_star

# Rule:
# S = start
# T = target
# X = wall
# [0-9] = cost

# Map Demo
# 不同点位消耗
# game_map = [
#     ["S", "9", "9", "9", "0", "0", "0", "0", "0"],
#     ["0", "0", "0", "1", "0", "0", "X", "X", "0"],
#     ["0", "0", "0", "9", "0", "9", "0", "0", "0"],
#     ["0", "0", "9", "9", "0", "0", "T", "0", "0"],
#     ["0", "0", "0", "9", "9", "0", "0", "0", "0"],
#     ["0", "X", "0", "0", "0", "0", "0", "0", "0"],
#     ["0", "0", "0", "0", "0", "0", "0", "0", "0"],
# ]

# 空，用于测试欧式和曼哈顿的评估公式对方向的影响
# game_map = [
#     ["S", "0", "0", "0", "0", "0", "0", "0", "0"],
#     ["0", "0", "0", "0", "0", "0", "0", "0", "0"],
#     ["0", "0", "0", "0", "0", "0", "0", "0", "0"],
#     ["0", "0", "0", "0", "0", "0", "0", "0", "0"],
#     ["0", "0", "0", "0", "0", "0", "0", "0", "0"],
#     ["0", "0", "0", "0", "0", "0", "0", "0", "0"],
#     ["0", "0", "0", "0", "0", "0", "0", "0", "0"],
#     ["0", "0", "0", "0", "0", "0", "0", "0", "0"],
#     ["0", "0", "0", "0", "0", "0", "0", "0", "T"],
# ]

# C 字型 block
# 误导方向主导的寻路
game_map = [
    ["S", "0", "0", "x", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "x", "x", "x", "x", "x", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "x", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "x", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "x", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "x", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "x", "0"],
    ["0", "x", "x", "x", "x", "x", "x", "x", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "T"],
]

if __name__ == '__main__':
    # path_finder = breadth_first_search(game_map)
    # path_finder = dijkstra(game_map)
    # path_finder = heuristic_search(game_map)
    path_finder = a_star(game_map)
    path_finder.start()

    print("Done.")
